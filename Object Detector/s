<html>
<head>
  <title>Realâ€‘Time Object Detection</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: #f7f7f7;
      font-family: Arial, sans-serif;
      display: flex;
      flex-direction: row;
    }

    h1 {
      margin-top: 20px;
      text-align: center;
      color: #333;
    }

    .video-container {
      flex: 2;
      margin: 20px;
      border: 2px solid #444;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      background: #000;
      position: cover   ;
    }

    video, canvas {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    #quitBtn {
      margin: 20px;
      padding: 10px 20px;
      font-size: 16px;
      border: none;
      background: #d9534f;
      color: #fff;
      position: fixed;
      bottom: 10px;
      right: 10px;
      border-radius: 5px;
      cursor: pointer;
      transition: background 0.3s ease;
      z-index: 1;
      position: fixed;
      bottom: 10px;
      right: 10px;
    }

    #quitBtn:hover {
      background: #c9302c;
      transform: scale(1.3);
    }

    #sidePanel {
      flex: 1;
      margin: 20px;
      padding: 10px;
      background: rgba(255, 255, 255, 0.4); /* Translucent white background */
      border: 2px solid #444;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      max-height: 480px;
      overflow-y: auto;
      z-index: 1;
      position: fixed;
      top: 10;
      left: 10px;
    }

    #sidePanel h2 {
      margin-top: 0;
      color: #333;
      text-align: center;
    }

    #objectList {
      list-style: none;
      padding: 0;
    }

    #objectList li {
      margin-bottom: 10px;
      font-size: 16px;
      color: #444;
    }
  </style>
</head>
<body>
  <div>
    <div class="video-container">
      
      <video id="video" autoplay muted playsinline></video>
      
      <canvas id="canvas"></canvas>
    </div>
    <button id="quitBtn">Quit</button>
  </div>
  <div id="sidePanel">
    <h2>Detected Objects</h2>
    <ul id="objectList"></ul>
  </div>
  
 
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@3.13.0/dist/tf.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/coco-ssd"></script>
  
  <script>
  
    const video = document.getElementById('video');
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');
    const objectList = document.getElementById('objectList');
    const quitBtn = document.getElementById('quitBtn');
    let stream = null;
    let model = null;
    let isModelLoaded = false;

    
    const colorMap = {};
    function getColor(label) {
      if (colorMap[label]) {
        return colorMap[label];
      }
     
      const r = Math.floor(Math.random() * 256);
      const g = Math.floor(Math.random() * 256);
      const b = Math.floor(Math.random() * 256);
      const color = `rgb(${r}, ${g}, ${b})`;
      colorMap[label] = color;
      return color;
    }

   
    cocoSsd.load().then(loadedModel => {
      model = loadedModel;
      isModelLoaded = true;
      console.log("COCO-SSD model loaded.");
      startVideo();
    });

   
    function startVideo() {
      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
        navigator.mediaDevices.getUserMedia({ video: true })
          .then(s => {
            stream = s;
            video.srcObject = stream;
          })
          .catch(err => {
            console.error("Error accessing webcam:", err);
          });
      } else {
        alert("getUserMedia not supported in this browser.");
      }
    }

   
    video.addEventListener('loadeddata', () => {
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      requestAnimationFrame(detectFrame);
    });

   
    function detectFrame() {
      if (isModelLoaded) {
        model.detect(video).then(predictions => {
          
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          objectList.innerHTML = '';

          predictions.forEach(prediction => {
            if (prediction.score > 0.5) {
              const [x, y, width, height] = prediction.bbox;
              ctx.strokeStyle = getColor(prediction.class);
              ctx.lineWidth = 2;
              ctx.strokeRect(x, y, width, height);

              
              ctx.fillStyle = getColor(prediction.class);
              ctx.font = "16px Arial";
              const text = `${prediction.class} (${(prediction.score * 100).toFixed(1)}%)`;
              const textWidth = ctx.measureText(text).width;
              ctx.fillRect(x, y - 20, textWidth + 10, 20);

              ctx.fillStyle = "#ffffff";
              ctx.fillText(text, x + 5, y - 5);

             
              const listItem = document.createElement('li');
              listItem.textContent = `${prediction.class} (${(prediction.score * 100).toFixed(1)}%)`;
              objectList.appendChild(listItem);
            }
          });

          requestAnimationFrame(detectFrame);
        });
      } else {
        requestAnimationFrame(detectFrame);
      }
    }

        quitBtn.addEventListener('click', () => {
      if (stream) {
        stream.getTracks().forEach(track => track.stop());
      }
      video.pause();
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      objectList.innerHTML = '';
      alert("Video stream has ended.");
    });
  </script>
</body>
</html>
